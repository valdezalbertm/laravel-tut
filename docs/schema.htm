<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
    <head><link rel="icon" sizes="144x144" href="..//img/footer_logo.png">
            <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Schema</title>
    <meta name="description" content="Laravel, the elegant PHP framework for web artisans. Start enjoying development again.">
    <link rel="stylesheet" href="../css/style.css">
        <script src="../js/vendor/modernizr-2.6.2.min.js"></script>
    </head>
    <body>
            <header>
        <div class="container">
            <a href="../laravel_default.html" title="Laravel PHP Framework" class="logo">&nbsp;</a>
            <nav class="menu">
                <ul>
                    <li><a href="../laravel_default.html" title="Welcome">Welcome</a></li>
                    <li class="active"><a href="../docs.htm" title="Documentation">Documentation</a></li>
                    <li><a href="http://laravel.com/api" title="Laravel Framework API">API</a></li>
                    <li><a href="https://github.com/laravel/laravel" title="Github">Github</a></li>
                    <li><a href="http://forums.laravel.io/" title="Laravel Forums">Forums</a></li>
                    <li><a href="http://twitter.com/laravelphp" title="Laravel on Twitter">Twitter</a></li>
                </ul>
            </nav>
            <a class="to-top">Back to Top</a>
        </div>
    </header>


        <section class="docs-heading">
        <div class="container">
            <h2>Documentation</h2>
            <div class="sponsor">
                <span>Sponsored By</span>
                                                <a href="http://www.cartalyst.com/" title="Cartalyst"><img src="../img/cartalyst_small.png"></a>
                            </div>
        </div>
    </section>

    <section class="docs-content">
        <div class="container">
            <nav class="docs-menu">
                <ul>
<li>Preface

<ul>
<li><a href="introduction.htm">Introduction</a></li>
<li><a href="quick.htm">Quickstart</a></li>
<li><a href="contributing.htm">Contributing</a></li>
</ul></li>
<li>Getting Started

<ul>
<li><a href="installation.htm">Installation</a></li>
<li><a href="configuration.htm">Configuration</a></li>
<li><a href="lifecycle.htm">Request Lifecycle</a></li>
<li><a href="routing.htm">Routing</a></li>
<li><a href="requests.htm">Requests &amp; Input</a></li>
<li><a href="responses.htm">Views &amp; Responses</a></li>
<li><a href="controllers.htm">Controllers</a></li>
<li><a href="errors.htm">Errors &amp; Logging</a></li>
</ul></li>
<li>Learning More

<ul>
<li><a href="cache.htm">Cache</a></li>
<li><a href="events.htm">Events</a></li>
<li><a href="facades.htm">Facades</a></li>
<li><a href="html.htm">Forms &amp; HTML</a></li>
<li><a href="helpers.htm">Helpers</a></li>
<li><a href="ioc.htm">IoC Container</a></li>
<li><a href="localization.htm">Localization</a></li>
<li><a href="mail.htm">Mail</a></li>
<li><a href="packages.htm">Package Development</a></li>
<li><a href="pagination.htm">Pagination</a></li>
<li><a href="queues.htm">Queues</a></li>
<li><a href="security.htm">Security</a></li>
<li><a href="session.htm">Session</a></li>
<li><a href="templates.htm">Templates</a></li>
<li><a href="testing.htm">Unit Testing</a></li>
<li><a href="validation.htm">Validation</a></li>
</ul></li>
<li>Database

<ul>
<li><a href="database.htm">Basic Usage</a></li>
<li><a href="queries.htm">Query Builder</a></li>
<li><a href="eloquent.htm">Eloquent ORM</a></li>
<li><a href="schema.htm">Schema Builder</a></li>
<li><a href="migrations.htm">Migrations &amp; Seeding</a></li>
<li><a href="redis.htm">Redis</a></li>
</ul></li>
<li>Artisan CLI

<ul>
<li><a href="artisan.htm">Overview</a></li>
<li><a href="commands.htm">Development</a></li>
</ul></li>
</ul>
            </nav>
            <article class="docs-body">
                <h1>Schema Builder</h1>

<ul>
<li><a href="schema.htm#introduction">Introduction</a></li>
<li><a href="schema.htm#creating-and-dropping-tables">Creating &amp; Dropping Tables</a></li>
<li><a href="schema.htm#adding-columns">Adding Columns</a></li>
<li><a href="schema.htm#renaming-columns">Renaming Columns</a></li>
<li><a href="schema.htm#dropping-columns">Dropping Columns</a></li>
<li><a href="schema.htm#checking-existence">Checking Existence</a></li>
<li><a href="schema.htm#adding-indexes">Adding Indexes</a></li>
<li><a href="schema.htm#foreign-keys">Foreign Keys</a></li>
<li><a href="schema.htm#dropping-indexes">Dropping Indexes</a></li>
<li><a href="schema.htm#storage-engines">Storage Engines</a></li>
</ul>

<p><a name="introduction"></a></p>

<h2>Introduction</h2>

<p>The Laravel <code>Schema</code> class provides a database agnostic way of manipulating tables. It works well with all of the databases supported by Laravel, and has a unified API across all of these systems.</p>

<p><a name="creating-and-dropping-tables"></a></p>

<h2>Creating &amp; Dropping Tables</h2>

<p>To create a new database table, the <code>Schema::create</code> method is used:</p>

<pre><code>Schema::create('users', function($table)
{
    $table-&gt;increments('id');
});
</code></pre>

<p>The first argument passed to the <code>create</code> method is the name of the table, and the second is a <code>Closure</code> which will receive a <code>Blueprint</code> object which may be used to define the new table.</p>

<p>To rename an existing database table, the <code>rename</code> method may be used:</p>

<pre><code>Schema::rename($from, $to);
</code></pre>

<p>To specify which connection the schema operation should take place on, use the <code>Schema::connection</code> method:</p>

<pre><code>Schema::connection('foo')-&gt;create('users', function($table)
{
    $table-&gt;increments('id');
});
</code></pre>

<p>To drop a table, you may use the <code>Schema::drop</code> method:</p>

<pre><code>Schema::drop('users');

Schema::dropIfExists('users');
</code></pre>

<p><a name="adding-columns"></a></p>

<h2>Adding Columns</h2>

<p>To update an existing table, we will use the <code>Schema::table</code> method:</p>

<pre><code>Schema::table('users', function($table)
{
    $table-&gt;string('email');
});
</code></pre>

<p>The table builder contains a variety of column types that you may use when building your tables:</p>

<table>
<thead>
<tr>
  <th>Command</th>
  <th>Description</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>$table-&gt;increments('id');</code></td>
  <td>Incrementing ID to the table (primary key).</td>
</tr>
<tr>
  <td><code>$table-&gt;bigIncrements('id');</code></td>
  <td>Incrementing ID using a "big integer" equivalent.</td>
</tr>
<tr>
  <td><code>$table-&gt;string('email');</code></td>
  <td>VARCHAR equivalent column</td>
</tr>
<tr>
  <td><code>$table-&gt;string('name', 100);</code></td>
  <td>VARCHAR equivalent with a length</td>
</tr>
<tr>
  <td><code>$table-&gt;integer('votes');</code></td>
  <td>INTEGER equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;bigInteger('votes');</code></td>
  <td>BIGINT equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;smallInteger('votes');</code></td>
  <td>SMALLINT equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;float('amount');</code></td>
  <td>FLOAT equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;decimal('amount', 5, 2);</code></td>
  <td>DECIMAL equivalent with a precision and scale</td>
</tr>
<tr>
  <td><code>$table-&gt;boolean('confirmed');</code></td>
  <td>BOOLEAN equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;date('created_at');</code></td>
  <td>DATE equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;dateTime('created_at');</code></td>
  <td>DATETIME equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;time('sunrise');</code></td>
  <td>TIME equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;timestamp('added_on');</code></td>
  <td>TIMESTAMP equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;timestamps();</code></td>
  <td>Adds <strong>created&#95;at</strong> and <strong>updated&#95;at</strong> columns</td>
</tr>
<tr>
  <td><code>$table-&gt;softDeletes();</code></td>
  <td>Adds <strong>deleted&#95;at</strong> column for soft deletes</td>
</tr>
<tr>
  <td><code>$table-&gt;text('description');</code></td>
  <td>TEXT equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;binary('data');</code></td>
  <td>BLOB equivalent to the table</td>
</tr>
<tr>
  <td><code>$table-&gt;enum('choices', array('foo', 'bar'));</code></td>
  <td>ENUM equivalent to the table</td>
</tr>
<tr>
  <td><code>-&gt;nullable()</code></td>
  <td>Designate that the column allows NULL values</td>
</tr>
<tr>
  <td><code>-&gt;default($value)</code></td>
  <td>Declare a default value for a column</td>
</tr>
<tr>
  <td><code>-&gt;unsigned()</code></td>
  <td>Set INTEGER to UNSIGNED</td>
</tr>
</tbody>
</table>

<p>If you are using the MySQL database, you may use the <code>after</code> method to specify the order of columns:</p>

<p><strong>Using After On MySQL</strong></p>

<pre><code>$table-&gt;string('name')-&gt;after('email');
</code></pre>

<p><a name="renaming-columns"></a></p>

<h2>Renaming Columns</h2>

<p>To rename a column, you may use the <code>renameColumn</code> method on the Schema builder:</p>

<p><strong>Renaming A Column</strong></p>

<pre><code>Schema::table('users', function($table)
{
    $table-&gt;renameColumn('from', 'to');
});
</code></pre>

<blockquote>
  <p><strong>Note:</strong> Renaming <code>enum</code> column types is not supported.</p>
</blockquote>

<p><a name="dropping-columns"></a></p>

<h2>Dropping Columns</h2>

<p><strong>Dropping A Column From A Database Table</strong></p>

<pre><code>Schema::table('users', function($table)
{
    $table-&gt;dropColumn('votes');
});
</code></pre>

<p><strong>Dropping Multiple Columns From A Database Table</strong></p>

<pre><code>Schema::table('users', function($table)
{
    $table-&gt;dropColumn('votes', 'avatar', 'location');
});
</code></pre>

<p><a name="checking-existence"></a></p>

<h2>Checking Existence</h2>

<p>You may easily check for the existence of a table or column using the <code>hasTable</code> and <code>hasColumn</code> methods:</p>

<p><strong>Checking For Existence Of Table</strong></p>

<pre><code>if (Schema::hasTable('users'))
{
    //
}
</code></pre>

<p><strong>Checking For Existence Of Columns</strong></p>

<pre><code>if (Schema::hasColumn('users', 'email'))
{
    //
}
</code></pre>

<p><a name="adding-indexes"></a></p>

<h2>Adding Indexes</h2>

<p>The schema builder supports several types of indexes. There are two ways to add them. First, you may fluently define them on a column definition, or you may add them separately:</p>

<p><strong>Fluently Creating A Column And Index</strong></p>

<pre><code>$table-&gt;string('email')-&gt;unique();
</code></pre>

<p>Or, you may choose to add the indexes on separate lines. Below is a list of all available index types:</p>

<table>
<thead>
<tr>
  <th>Command</th>
  <th>Description</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>$table-&gt;primary('id');</code></td>
  <td>Adding a primary key</td>
</tr>
<tr>
  <td><code>$table-&gt;primary(array('first', 'last'));</code></td>
  <td>Adding composite keys</td>
</tr>
<tr>
  <td><code>$table-&gt;unique('email');</code></td>
  <td>Adding a unique index</td>
</tr>
<tr>
  <td><code>$table-&gt;index('state');</code></td>
  <td>Adding a basic index</td>
</tr>
</tbody>
</table>

<p><a name="foreign-keys"></a></p>

<h2>Foreign Keys</h2>

<p>Laravel also provides support for adding foreign key constraints to your tables:</p>

<p><strong>Adding A Foreign Key To A Table</strong></p>

<pre><code>$table-&gt;foreign('user_id')-&gt;references('id')-&gt;on('users');
</code></pre>

<p>In this example, we are stating that the <code>user_id</code> column references the <code>id</code> column on the <code>users</code> table.</p>

<p>You may also specify options for the "on delete" and "on update" actions of the constraint:</p>

<pre><code>$table-&gt;foreign('user_id')
      -&gt;references('id')-&gt;on('users')
      -&gt;onDelete('cascade');
</code></pre>

<p>To drop a foreign key, you may use the <code>dropForeign</code> method. A similar naming convention is used for foreign keys as is used for other indexes:</p>

<pre><code>$table-&gt;dropForeign('posts_user_id_foreign');
</code></pre>

<blockquote>
  <p><strong>Note:</strong> When creating a foreign key that references an incrementing integer, remember to always make the foreign key column <code>unsigned</code>.</p>
</blockquote>

<p><a name="dropping-indexes"></a></p>

<h2>Dropping Indexes</h2>

<p>To drop an index you must specify the index's name. Laravel assigns a reasonable name to the indexes by default. Simply concatenate the table name, the names of the column in the index, and the index type. Here are some examples:</p>

<table>
<thead>
<tr>
  <th>Command</th>
  <th>Description</th>
</tr>
</thead>
<tbody>
<tr>
  <td><code>$table-&gt;dropPrimary('users_id_primary');</code></td>
  <td>Dropping a primary key from the "users" table</td>
</tr>
<tr>
  <td><code>$table-&gt;dropUnique('users_email_unique');</code></td>
  <td>Dropping a unique index from the "users" table</td>
</tr>
<tr>
  <td><code>$table-&gt;dropIndex('geo_state_index');</code></td>
  <td>Dropping a basic index from the "geo" table</td>
</tr>
</tbody>
</table>

<p><a name="storage-engines"></a></p>

<h2>Storage Engines</h2>

<p>To set the storage engine for a table, set the <code>engine</code> property on the schema builder:</p>

<pre><code>Schema::create('users', function($table)
{
    $table-&gt;engine = 'InnoDB';

    $table-&gt;string('email');
});
</code></pre>
            </article>
            <div class="clearfix"></div>
        </div>
    </section>

    <footer>
        <div class="container">
            <a href="../laravel_default.html" title="Laravel PHP Framework" class="logo"><img src="../img/footer_logo.png" alt="Laravel PHP Framework"></a>
            <nav class="menu">
                <ul>
                    <li><a href="http://laravel.com/laravel_default.html" title="Welcome">Welcome</a></li>
                    <li><a href="http://laravel.com/docs.htm" title="Documentation">Documentation</a></li>
                    <li><a href="http://laravel.com/api" title="Laravel Framework API">API</a></li>
                    <li><a href="https://github.com/laravel/laravel" title="Github">Github</a></li>
                    <li><a href="http://forums.laravel.io/" title="Laravel Forums">Forums</a></li>
                    <li><a href="http://twitter.com/laravelphp" title="Laravel on Twitter">Twitter</a></li>
                </ul>
            </nav>
            <p class="copyright">Copyright &copy; 2013 Taylor Otwell. Site designed by <a href="http://casserolelabs.com/" title="Casserole Labs">Casserole Labs</a> &amp; <a href="http://daylerees.com" title="Dayle Rees">Dayle Rees</a>.</p>
        </div>
    </footer>

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="../js/vendor/jquery-1.9.1.min.js"><\/script>')</script>
    <script src="../js/plugins.js"></script>
    <script src="../js/main.min.js"></script>
        <script>
        var _gaq=[['_setAccount','UA-23865777-1'],['_trackPageview']];
        (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
        g.src='//www.google-analytics.com/ga.js';
        s.parentNode.insertBefore(g,s)}(document,'script'));
    </script>
    </body>
</html>