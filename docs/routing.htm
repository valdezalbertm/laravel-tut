<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
    <head><link rel="icon" sizes="144x144" href="..//img/footer_logo.png">
            <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Routing</title>
    <meta name="description" content="Laravel, the elegant PHP framework for web artisans. Start enjoying development again.">
    <link rel="stylesheet" href="../css/style.css">
        <script src="../js/vendor/modernizr-2.6.2.min.js"></script>
    </head>
    <body>
            <header>
        <div class="container">
            <a href="../laravel_default.html" title="Laravel PHP Framework" class="logo">&nbsp;</a>
            <nav class="menu">
                <ul>
                    <li><a href="../laravel_default.html" title="Welcome">Welcome</a></li>
                    <li class="active"><a href="../docs.htm" title="Documentation">Documentation</a></li>
                    <li><a href="http://laravel.com/api" title="Laravel Framework API">API</a></li>
                    <li><a href="https://github.com/laravel/laravel" title="Github">Github</a></li>
                    <li><a href="http://forums.laravel.io/" title="Laravel Forums">Forums</a></li>
                    <li><a href="http://twitter.com/laravelphp" title="Laravel on Twitter">Twitter</a></li>
                </ul>
            </nav>
            <a class="to-top">Back to Top</a>
        </div>
    </header>


        <section class="docs-heading">
        <div class="container">
            <h2>Documentation</h2>
            <div class="sponsor">
                <span>Sponsored By</span>
                                                <a href="http://www.cartalyst.com/" title="Cartalyst"><img src="../img/cartalyst_small.png"></a>
                            </div>
        </div>
    </section>

    <section class="docs-content">
        <div class="container">
            <nav class="docs-menu">
                <ul>
<li>Preface

<ul>
<li><a href="introduction.htm">Introduction</a></li>
<li><a href="quick.htm">Quickstart</a></li>
<li><a href="contributing.htm">Contributing</a></li>
</ul></li>
<li>Getting Started

<ul>
<li><a href="installation.htm">Installation</a></li>
<li><a href="configuration.htm">Configuration</a></li>
<li><a href="lifecycle.htm">Request Lifecycle</a></li>
<li><a href="routing.htm">Routing</a></li>
<li><a href="requests.htm">Requests &amp; Input</a></li>
<li><a href="responses.htm">Views &amp; Responses</a></li>
<li><a href="controllers.htm">Controllers</a></li>
<li><a href="errors.htm">Errors &amp; Logging</a></li>
</ul></li>
<li>Learning More

<ul>
<li><a href="cache.htm">Cache</a></li>
<li><a href="events.htm">Events</a></li>
<li><a href="facades.htm">Facades</a></li>
<li><a href="html.htm">Forms &amp; HTML</a></li>
<li><a href="helpers.htm">Helpers</a></li>
<li><a href="ioc.htm">IoC Container</a></li>
<li><a href="localization.htm">Localization</a></li>
<li><a href="mail.htm">Mail</a></li>
<li><a href="packages.htm">Package Development</a></li>
<li><a href="pagination.htm">Pagination</a></li>
<li><a href="queues.htm">Queues</a></li>
<li><a href="security.htm">Security</a></li>
<li><a href="session.htm">Session</a></li>
<li><a href="templates.htm">Templates</a></li>
<li><a href="testing.htm">Unit Testing</a></li>
<li><a href="validation.htm">Validation</a></li>
</ul></li>
<li>Database

<ul>
<li><a href="database.htm">Basic Usage</a></li>
<li><a href="queries.htm">Query Builder</a></li>
<li><a href="eloquent.htm">Eloquent ORM</a></li>
<li><a href="schema.htm">Schema Builder</a></li>
<li><a href="migrations.htm">Migrations &amp; Seeding</a></li>
<li><a href="redis.htm">Redis</a></li>
</ul></li>
<li>Artisan CLI

<ul>
<li><a href="artisan.htm">Overview</a></li>
<li><a href="commands.htm">Development</a></li>
</ul></li>
</ul>
            </nav>
            <article class="docs-body">
                <h1>Routing</h1>

<ul>
<li><a href="routing.htm#basic-routing">Basic Routing</a></li>
<li><a href="routing.htm#route-parameters">Route Parameters</a></li>
<li><a href="routing.htm#route-filters">Route Filters</a></li>
<li><a href="routing.htm#named-routes">Named Routes</a></li>
<li><a href="routing.htm#route-groups">Route Groups</a></li>
<li><a href="routing.htm#sub-domain-routing">Sub-Domain Routing</a></li>
<li><a href="routing.htm#route-prefixing">Route Prefixing</a></li>
<li><a href="routing.htm#route-model-binding">Route Model Binding</a></li>
<li><a href="routing.htm#throwing-404-errors">Throwing 404 Errors</a></li>
<li><a href="routing.htm#routing-to-controllers">Routing To Controllers</a></li>
</ul>

<p><a name="basic-routing"></a></p>

<h2>Basic Routing</h2>

<p>Most of the routes for your application will be defined in the <code>app/routes.php</code> file. The simplest Laravel routes consist of a URI and a Closure callback.</p>

<p><strong>Basic GET Route</strong></p>

<pre><code>Route::get('/', function()
{
    return 'Hello World';
});
</code></pre>

<p><strong>Basic POST Route</strong></p>

<pre><code>Route::post('foo/bar', function()
{
    return 'Hello World';
});
</code></pre>

<p><strong>Registering A Route Responding To Any HTTP Verb</strong></p>

<pre><code>Route::any('foo', function()
{
    return 'Hello World';
});
</code></pre>

<p><strong>Forcing A Route To Be Served Over HTTPS</strong></p>

<pre><code>Route::get('foo', array('https', function()
{
    return 'Must be over HTTPS';
}));
</code></pre>

<p>Often, you will need to generate URLs to your routes, you may do so using the <code>URL::to</code> method:</p>

<pre><code>$url = URL::to('foo');
</code></pre>

<p><a name="route-parameters"></a></p>

<h2>Route Parameters</h2>

<pre><code>Route::get('user/{id}', function($id)
{
    return 'User '.$id;
});
</code></pre>

<p><strong>Optional Route Parameters</strong></p>

<pre><code>Route::get('user/{name?}', function($name = null)
{
    return $name;
});
</code></pre>

<p><strong>Optional Route Parameters With Defaults</strong></p>

<pre><code>Route::get('user/{name?}', function($name = 'John')
{
    return $name;
});
</code></pre>

<p><strong>Regular Expression Route Constraints</strong></p>

<pre><code>Route::get('user/{name}', function($name)
{
    //
})
-&gt;where('name', '[A-Za-z]+');

Route::get('user/{id}', function($id)
{
    //
})
-&gt;where('id', '[0-9]+');
</code></pre>

<p>Of course, you may pass an array of constraints when necessary:</p>

<pre><code>Route::get('user/{id}/{name}', function($id, $name)
{
    //
})
-&gt;where(array('id' =&gt; '[0-9]+', 'name' =&gt; '[a-z]+'))
</code></pre>

<p><a name="route-filters"></a></p>

<h2>Route Filters</h2>

<p>Route filters provide a convenient way of limiting access to a given route, which is useful for creating areas of your site which require authentication. There are several filters included in the Laravel framework, including an <code>auth</code> filter, an <code>auth.basic</code> filter, a <code>guest</code> filter, and a <code>csrf</code>filter. These are located in the <code>app/filters.php</code> file.</p>

<p><strong>Defining A Route Filter</strong></p>

<pre><code>Route::filter('old', function()
{
    if (Input::get('age') &lt; 200)
    {
        return Redirect::to('home');
    }
});
</code></pre>

<p>If a response is returned from a filter, that response will be considered the response to the request and the route will not be executed, and any <code>after</code> filters on the route will also be cancelled.</p>

<p><strong>Attaching A Filter To A Route</strong></p>

<pre><code>Route::get('user', array('before' =&gt; 'old', function()
{
    return 'You are over 200 years old!';
}));
</code></pre>

<p><strong>Attaching Multiple Filters To A Route</strong></p>

<pre><code>Route::get('user', array('before' =&gt; 'auth|old', function()
{
    return 'You are authenticated and over 200 years old!';
}));
</code></pre>

<p><strong>Specifying Filter Parameters</strong></p>

<pre><code>Route::filter('age', function($route, $request, $value)
{
    //
});

Route::get('user', array('before' =&gt; 'age:200', function()
{
    return 'Hello World';
}));
</code></pre>

<p>After filters receive a <code>$response</code> as the third argument passed to the filter:</p>

<pre><code>Route::filter('log', function($route, $request, $response, $value)
{
    //
});
</code></pre>

<p><strong>Pattern Based Filters</strong></p>

<p>You may also specify that a filter applies to an entire set of routes based on their URI.</p>

<pre><code>Route::filter('admin', function()
{
    //
});

Route::when('admin/*', 'admin');
</code></pre>

<p>In the example above, the <code>admin</code> filter would be applied to all routes beginning with <code>admin/</code>. The asterisk is used as a wildcard, and will match any combination of characters.</p>

<p>You may also constrain pattern filters by HTTP verbs:</p>

<pre><code>Route::when('admin/*', 'admin', array('post'));
</code></pre>

<p><strong>Filter Classes</strong></p>

<p>For advanced filtering, you may wish to use a class instead of a Closure. Since filter classes are resolved out of the application <a href="ioc.htm">IoC Container</a>, you will be able to utilize dependency injection in these filters for greater testability.</p>

<p><strong>Defining A Filter Class</strong></p>

<pre><code>class FooFilter {

    public function filter()
    {
        // Filter logic...
    }

}
</code></pre>

<p><strong>Registering A Class Based Filter</strong></p>

<pre><code>Route::filter('foo', 'FooFilter');
</code></pre>

<p><a name="named-routes"></a></p>

<h2>Named Routes</h2>

<p>Named routes make referring to routes when generating redirects or URLs more convenient. You may specify a name for a route like so:</p>

<pre><code>Route::get('user/profile', array('as' =&gt; 'profile', function()
{
    //
}));
</code></pre>

<p>You may also specify route names for controller actions:</p>

<pre><code>Route::get('user/profile', array('as' =&gt; 'profile', 'uses' =&gt; 'UserController@showProfile'));
</code></pre>

<p>Now, you may use the route's name when generating URLs or redirects:</p>

<pre><code>$url = URL::route('profile');

$redirect = Redirect::route('profile');
</code></pre>

<p>You may access the name of a route that is running via the <code>currentRouteName</code> method:</p>

<pre><code>$name = Route::currentRouteName();
</code></pre>

<p><a name="route-groups"></a></p>

<h2>Route Groups</h2>

<p>Sometimes you may need to apply filters to a group of routes. Instead of specifying the filter on each route, you may use a route group:</p>

<pre><code>Route::group(array('before' =&gt; 'auth'), function()
{
    Route::get('/', function()
    {
        // Has Auth Filter
    });

    Route::get('user/profile', function()
    {
        // Has Auth Filter
    });
});
</code></pre>

<p><a name="sub-domain-routing"></a></p>

<h2>Sub-Domain Routing</h2>

<p>Laravel routes are also able to handle wildcard sub-domains, and pass you wildcard parameters from the domain:</p>

<p><strong>Registering Sub-Domain Routes</strong></p>

<pre><code>Route::group(array('domain' =&gt; '{account}.myapp.com'), function()
{

    Route::get('user/{id}', function($account, $id)
    {
        //
    });

});
</code></pre>

<p><a name="route-prefixing"></a></p>

<h2>Route Prefixing</h2>

<p>A group of routes may be prefixed by using the <code>prefix</code> option in the attributes array of a group:</p>

<p><strong>Prefixing Grouped Routes</strong></p>

<pre><code>Route::group(array('prefix' =&gt; 'admin'), function()
{

    Route::get('user', function()
    {
        //
    });

});
</code></pre>

<p><a name="route-model-binding"></a></p>

<h2>Route Model Binding</h2>

<p>Model binding provides a convenient way to inject model instances into your routes. For example, instead of injecting a user's ID, you can inject the entire User model instance that matches the given ID. First, use the <code>Route::model</code> method to specify the model that should be used for a given parameter:</p>

<p><strong>Binding A Parameter To A Model</strong></p>

<pre><code>Route::model('user', 'User');
</code></pre>

<p>Next, define a route that contains a <code>{user}</code> parameter:</p>

<pre><code>Route::get('profile/{user}', function(User $user)
{
    //
});
</code></pre>

<p>Since we have bound the <code>{user}</code> parameter to the <code>User</code> model, a <code>User</code> instance will be injected into the route. So, for example, a request to <code>profile/1</code> will inject the <code>User</code> instance which has an ID of 1.</p>

<blockquote>
  <p><strong>Note:</strong> If a matching model instance is not found in the database, a 404 error will be thrown.</p>
</blockquote>

<p>If you wish to specify your own "not found" behavior, you may pass a Closure as the third argument to the <code>model</code> method:</p>

<pre><code>Route::model('user', 'User', function()
{
    throw new NotFoundException;
});
</code></pre>

<p>Sometimes you may wish to use your own resolver for route parameters. Simply use the <code>Route::bind</code> method:</p>

<pre><code>Route::bind('user', function($value, $route)
{
    return User::where('name', $value)-&gt;first();
});
</code></pre>

<p><a name="throwing-404-errors"></a></p>

<h2>Throwing 404 Errors</h2>

<p>There are two ways to manually trigger a 404 error from a route. First, you may use the <code>App::abort</code> method:</p>

<pre><code>App::abort(404);
</code></pre>

<p>Second, you may throw an instance of <code>Symfony\Component\HttpKernel\Exception\NotFoundHttpException</code>.</p>

<p>More information on handling 404 exceptions and using custom responses for these errors may be found in the <a href="errors.htm#handling-404-errors">errors</a> section of the documentation.</p>

<p><a name="routing-to-controllers"></a></p>

<h2>Routing To Controllers</h2>

<p>Laravel allows you to not only route to Closures, but also to controller classes, and even allows the creation of <a href="controllers.htm#resource-controllers">resource controllers</a>.</p>

<p>See the documentation on <a href="controllers.htm">Controllers</a> for more details.</p>
            </article>
            <div class="clearfix"></div>
        </div>
    </section>

    <footer>
        <div class="container">
            <a href="../laravel_default.html" title="Laravel PHP Framework" class="logo"><img src="../img/footer_logo.png" alt="Laravel PHP Framework"></a>
            <nav class="menu">
                <ul>
                    <li><a href="http://laravel.com/laravel_default.html" title="Welcome">Welcome</a></li>
                    <li><a href="http://laravel.com/docs.htm" title="Documentation">Documentation</a></li>
                    <li><a href="http://laravel.com/api" title="Laravel Framework API">API</a></li>
                    <li><a href="https://github.com/laravel/laravel" title="Github">Github</a></li>
                    <li><a href="http://forums.laravel.io/" title="Laravel Forums">Forums</a></li>
                    <li><a href="http://twitter.com/laravelphp" title="Laravel on Twitter">Twitter</a></li>
                </ul>
            </nav>
            <p class="copyright">Copyright &copy; 2013 Taylor Otwell. Site designed by <a href="http://casserolelabs.com/" title="Casserole Labs">Casserole Labs</a> &amp; <a href="http://daylerees.com" title="Dayle Rees">Dayle Rees</a>.</p>
        </div>
    </footer>

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="../js/vendor/jquery-1.9.1.min.js"><\/script>')</script>
    <script src="../js/plugins.js"></script>
    <script src="../js/main.min.js"></script>
        <script>
        var _gaq=[['_setAccount','UA-23865777-1'],['_trackPageview']];
        (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
        g.src='//www.google-analytics.com/ga.js';
        s.parentNode.insertBefore(g,s)}(document,'script'));
    </script>
    </body>
</html>