<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
    <head><link rel="icon" sizes="144x144" href="..//img/footer_logo.png">
            <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <title>Helpers</title>
    <meta name="description" content="Laravel, the elegant PHP framework for web artisans. Start enjoying development again.">
    <link rel="stylesheet" href="../css/style.css">
        <script src="../js/vendor/modernizr-2.6.2.min.js"></script>
    </head>
    <body>
            <header>
        <div class="container">
            <a href="../laravel_default.html" title="Laravel PHP Framework" class="logo">&nbsp;</a>
            <nav class="menu">
                <ul>
                    <li><a href="../laravel_default.html" title="Welcome">Welcome</a></li>
                    <li class="active"><a href="../docs.htm" title="Documentation">Documentation</a></li>
                    <li><a href="http://laravel.com/api" title="Laravel Framework API">API</a></li>
                    <li><a href="https://github.com/laravel/laravel" title="Github">Github</a></li>
                    <li><a href="http://forums.laravel.io/" title="Laravel Forums">Forums</a></li>
                    <li><a href="http://twitter.com/laravelphp" title="Laravel on Twitter">Twitter</a></li>
                </ul>
            </nav>
            <a class="to-top">Back to Top</a>
        </div>
    </header>


        <section class="docs-heading">
        <div class="container">
            <h2>Documentation</h2>
            <div class="sponsor">
                <span>Sponsored By</span>
                                                <a href="http://www.cartalyst.com/" title="Cartalyst"><img src="../img/cartalyst_small.png"></a>
                            </div>
        </div>
    </section>

    <section class="docs-content">
        <div class="container">
            <nav class="docs-menu">
                <ul>
<li>Preface

<ul>
<li><a href="introduction.htm">Introduction</a></li>
<li><a href="quick.htm">Quickstart</a></li>
<li><a href="contributing.htm">Contributing</a></li>
</ul></li>
<li>Getting Started

<ul>
<li><a href="installation.htm">Installation</a></li>
<li><a href="configuration.htm">Configuration</a></li>
<li><a href="lifecycle.htm">Request Lifecycle</a></li>
<li><a href="routing.htm">Routing</a></li>
<li><a href="requests.htm">Requests &amp; Input</a></li>
<li><a href="responses.htm">Views &amp; Responses</a></li>
<li><a href="controllers.htm">Controllers</a></li>
<li><a href="errors.htm">Errors &amp; Logging</a></li>
</ul></li>
<li>Learning More

<ul>
<li><a href="cache.htm">Cache</a></li>
<li><a href="events.htm">Events</a></li>
<li><a href="facades.htm">Facades</a></li>
<li><a href="html.htm">Forms &amp; HTML</a></li>
<li><a href="helpers.htm">Helpers</a></li>
<li><a href="ioc.htm">IoC Container</a></li>
<li><a href="localization.htm">Localization</a></li>
<li><a href="mail.htm">Mail</a></li>
<li><a href="packages.htm">Package Development</a></li>
<li><a href="pagination.htm">Pagination</a></li>
<li><a href="queues.htm">Queues</a></li>
<li><a href="security.htm">Security</a></li>
<li><a href="session.htm">Session</a></li>
<li><a href="templates.htm">Templates</a></li>
<li><a href="testing.htm">Unit Testing</a></li>
<li><a href="validation.htm">Validation</a></li>
</ul></li>
<li>Database

<ul>
<li><a href="database.htm">Basic Usage</a></li>
<li><a href="queries.htm">Query Builder</a></li>
<li><a href="eloquent.htm">Eloquent ORM</a></li>
<li><a href="schema.htm">Schema Builder</a></li>
<li><a href="migrations.htm">Migrations &amp; Seeding</a></li>
<li><a href="redis.htm">Redis</a></li>
</ul></li>
<li>Artisan CLI

<ul>
<li><a href="artisan.htm">Overview</a></li>
<li><a href="commands.htm">Development</a></li>
</ul></li>
</ul>
            </nav>
            <article class="docs-body">
                <h1>Helper Functions</h1>

<ul>
<li><a href="helpers.htm#arrays">Arrays</a></li>
<li><a href="helpers.htm#paths">Paths</a></li>
<li><a href="helpers.htm#strings">Strings</a></li>
<li><a href="helpers.htm#urls">URLs</a></li>
<li><a href="helpers.htm#miscellaneous">Miscellaneous</a></li>
</ul>

<p><a name="arrays"></a></p>

<h2>Arrays</h2>

<h3>array_add</h3>

<p>The <code>array_add</code> function adds a given key / value pair to the array if the given key doesn't already exist in the array.</p>

<pre><code>$array = array('foo' =&gt; 'bar');

$array = array_add($array, 'key', 'value');
</code></pre>

<h3>array_divide</h3>

<p>The <code>array_divide</code> function returns two arrays, one containing the keys, and the other containing the values of the original array.</p>

<pre><code>$array = array('foo' =&gt; 'bar');

list($keys, $values) = array_divide($array);
</code></pre>

<h3>array_dot</h3>

<p>The <code>array_dot</code> function flattens a multi-dimensional array into a single level array that uses "dot" notation to indicate depth.</p>

<pre><code>$array = array('foo' =&gt; array('bar' =&gt; 'baz'));

$array = array_dot($array);

// array('foo.bar' =&gt; 'baz');
</code></pre>

<h3>array_except</h3>

<p>The <code>array_except</code> method removes the given key / value pairs from the array.</p>

<pre><code>$array = array_except($array, array('keys', 'to', 'remove'));
</code></pre>

<h3>array_fetch</h3>

<p>The <code>array_fetch</code> method returns a flattened array containing the selected nested element.</p>

<pre><code>$array = array(array('name' =&gt; 'Taylor'), array('name' =&gt; 'Dayle'));

var_dump(array_fetch($array, 'name'));

// array('Taylor', 'Dayle');
</code></pre>

<h3>array_first</h3>

<p>The <code>array_first</code> method returns the first element of an array passing a given truth test.</p>

<pre><code>$array = array(100, 200, 300);

$value = array_first($array, function($key, $value)
{
    return $value &gt;= 150;
});
</code></pre>

<p>A default value may also be passed as the third parameter:</p>

<pre><code>$value = array_first($array, $callback, $default);
</code></pre>

<h3>array_flatten</h3>

<p>The <code>array_flatten</code> method will flatten a multi-dimensional array into a single level.</p>

<pre><code>$array = array('name' =&gt; 'Joe', 'languages' =&gt; array('PHP', 'Ruby'));

$array = array_flatten($array);

// array('Joe', 'PHP', 'Ruby');
</code></pre>

<h3>array_forget</h3>

<p>The <code>array_forget</code> method will remove a given key / value pair from a deeply nested array using "dot" notation.</p>

<pre><code>$array = array('names' =&gt; array('joe' =&gt; array('programmer')));

$array = array_forget($array, 'names.joe');
</code></pre>

<h3>array_get</h3>

<p>The <code>array_get</code> method will retrieve a given value from a deeply nested array using "dot" notation.</p>

<pre><code>$array = array('names' =&gt; array('joe' =&gt; array('programmer')));

$value = array_get($array, 'names.joe');
</code></pre>

<h3>array_only</h3>

<p>The <code>array_only</code> method will return only the specified key / value pairs from the array.</p>

<pre><code>$array = array('name' =&gt; 'Joe', 'age' =&gt; 27, 'votes' =&gt; 1);

$array = array_only($array, array('name', 'votes'));
</code></pre>

<h3>array_pluck</h3>

<p>The <code>array_pluck</code> method will pluck a list of the given key / value pairs from the array.</p>

<pre><code>$array = array(array('name' =&gt; 'Taylor'), array('name' =&gt; 'Dayle'));

$array = array_pluck($array, 'name');

// array('Taylor', 'Dayle');
</code></pre>

<h3>array_pull</h3>

<p>The <code>array_pull</code> method will return a given key / value pair from the array, as well as remove it.</p>

<pre><code>$array = array('name' =&gt; 'Taylor', 'age' =&gt; 27);

$name = array_pull($array, 'name');
</code></pre>

<h3>array_set</h3>

<p>The <code>array_set</code> method will set a value within a deeply nested array using "dot" notation.</p>

<pre><code>$array = array('names' =&gt; array('programmer' =&gt; 'Joe'));

array_set($array, 'names.editor', 'Taylor');
</code></pre>

<h3>array_sort</h3>

<p>The <code>array_sort</code> method sorts the array by the results of the given Closure.</p>

<pre><code>$array = array(
    array('name' =&gt; 'Jill'),
    array('name' =&gt; 'Barry'),
);

$array = array_values(array_sort($array, function($value)
{
    return $value['name'];
}));
</code></pre>

<h3>head</h3>

<p>Return the first element in the array. Useful for method chaining in PHP 5.3.x.</p>

<pre><code>$first = head($this-&gt;returnsArray('foo'));
</code></pre>

<h3>last</h3>

<p>Return the last element in the array. Useful for method chaining.</p>

<pre><code>$last = last($this-&gt;returnsArray('foo'));
</code></pre>

<p><a name="paths"></a></p>

<h2>Paths</h2>

<h3>app_path</h3>

<p>Get the fully qualified path to the <code>application</code> directory.</p>

<h3>base_path</h3>

<p>Get the fully qualified path to the root of the application install.</p>

<h3>public_path</h3>

<p>Get the fully qualified path to the <code>public</code> directory.</p>

<h3>storage_path</h3>

<p>Get the fully qualified path to the <code>application/storage</code> directory.</p>

<p><a name="strings"></a></p>

<h2>Strings</h2>

<h3>camel_case</h3>

<p>Convert the given string to <code>camelCase</code>.</p>

<pre><code>$camel = camel_case('foo_bar');

// fooBar
</code></pre>

<h3>class_basename</h3>

<p>Get the class name of the given class, without any namespace names.</p>

<pre><code>$class = class_basename('Foo\Bar\Baz');

// Baz
</code></pre>

<h3>e</h3>

<p>Run <code>htmlentities</code> over the given string, with UTF-8 support.</p>

<pre><code>$entities = e('&lt;html&gt;foo&lt;/html&gt;');
</code></pre>

<h3>ends_with</h3>

<p>Determine if the given haystack ends with a given needle.</p>

<pre><code>$value = ends_with('This is my name', 'name');
</code></pre>

<h3>snake_case</h3>

<p>Convert the given string to <code>snake_case</code>.</p>

<pre><code>$snake = snake_case('fooBar');

// foo_bar
</code></pre>

<h3>starts_with</h3>

<p>Determine if the given haystack begins with the given needle.</p>

<pre><code>$value = starts_with('This is my name', 'This');
</code></pre>

<h3>str_contains</h3>

<p>Determine if the given haystack contains the given needle.</p>

<pre><code>$value = str_contains('This is my name', 'my');
</code></pre>

<h3>str_finish</h3>

<p>Add a single instance of the given needle to the haystack. Remove any extra instances.</p>

<pre><code>$string = str_finish('this/string', '/');

// this/string/
</code></pre>

<h3>str_is</h3>

<p>Determine if a given string matches a given pattern. Asterisks may be used to indicate wildcards.</p>

<pre><code>$value = str_is('foo*', 'foobar');
</code></pre>

<h3>str_plural</h3>

<p>Convert a string to its plural form (English only).</p>

<pre><code>$plural = str_plural('car');
</code></pre>

<h3>str_random</h3>

<p>Generate a random string of the given length.</p>

<pre><code>$string = str_random(40);
</code></pre>

<h3>str_singular</h3>

<p>Convert a string to its singular form (English only).</p>

<pre><code>$singular = str_singular('cars');
</code></pre>

<h3>studly_case</h3>

<p>Convert the given string to <code>StudlyCase</code>.</p>

<pre><code>$value = studly_case('foo_bar');

// FooBar
</code></pre>

<h3>trans</h3>

<p>Translate a given language line. Alias of <code>Lang::get</code>.</p>

<pre><code>$value = trans('validation.required'):
</code></pre>

<h3>trans_choice</h3>

<p>Tranlate a given language line with inflection. Alias of <code>Lang::choice</code>.</p>

<pre><code>$value = trans_choice('foo.bar', $count);
</code></pre>

<p><a name="urls"></a></p>

<h2>URLs</h2>

<h3>action</h3>

<p>Generate a URL for a given controller action.</p>

<pre><code>$url = action('HomeController@getIndex', $params);
</code></pre>

<h3>asset</h3>

<p>Generate a URL for an asset.</p>

<pre><code>$url = asset('img/photo.jpg');
</code></pre>

<h3>link_to</h3>

<p>Generate a HTML link to the given URL.</p>

<pre><code>echo link_to('foo/bar', $title, $attributes = array(), $secure = null);
</code></pre>

<h3>link_to_asset</h3>

<p>Generate a HTML link to the given asset.</p>

<pre><code>echo link_to_asset('foo/bar.zip', $title, $attributes = array(), $secure = null);
</code></pre>

<h3>link_to_route</h3>

<p>Generate a HTML link to the given route.</p>

<pre><code>echo link_to_route('route.name', $title, $parameters = array(), $attributes = array());
</code></pre>

<h3>link_to_action</h3>

<p>Generate a HTML link to the given controller action.</p>

<pre><code>echo link_to_action('HomeController@getIndex', $title, $parameters = array(), $attributes = array());
</code></pre>

<h3>secure_asset</h3>

<p>Generate a HTML link to the given asset using HTTPS.</p>

<pre><code>echo secure_asset('foo/bar.zip', $title, $attributes = array());
</code></pre>

<h3>secure_url</h3>

<p>Generate a fully qualified URL to a given path using HTTPS.</p>

<pre><code>echo secure_url('foo/bar', $parameters = array());
</code></pre>

<h3>url</h3>

<p>Generate a fully qualified URL to the given path.</p>

<pre><code>echo url('foo/bar', $parameters = array(), $secure = null);
</code></pre>

<p><a name="miscellaneous"></a></p>

<h2>Miscellaneous</h2>

<h3>csrf_token</h3>

<p>Get the value of the current CSRF token.</p>

<pre><code>$token = csrf_token();
</code></pre>

<h3>dd</h3>

<p>Dump the given variable and end execution of the script.</p>

<pre><code>dd($value);
</code></pre>

<h3>value</h3>

<p>If the given value is a <code>Closure</code>, return the value returned by the <code>Closure</code>. Otherwise, return the value.</p>

<pre><code>$value = value(function() { return 'bar'; });
</code></pre>

<h3>with</h3>

<p>Return the given object. Useful for method chaining constructors in PHP 5.3.x.</p>

<pre><code>$value = with(new Foo)-&gt;doWork();
</code></pre>
            </article>
            <div class="clearfix"></div>
        </div>
    </section>

    <footer>
        <div class="container">
            <a href="../laravel_default.html" title="Laravel PHP Framework" class="logo"><img src="../img/footer_logo.png" alt="Laravel PHP Framework"></a>
            <nav class="menu">
                <ul>
                    <li><a href="http://laravel.com/laravel_default.html" title="Welcome">Welcome</a></li>
                    <li><a href="http://laravel.com/docs.htm" title="Documentation">Documentation</a></li>
                    <li><a href="http://laravel.com/api" title="Laravel Framework API">API</a></li>
                    <li><a href="https://github.com/laravel/laravel" title="Github">Github</a></li>
                    <li><a href="http://forums.laravel.io/" title="Laravel Forums">Forums</a></li>
                    <li><a href="http://twitter.com/laravelphp" title="Laravel on Twitter">Twitter</a></li>
                </ul>
            </nav>
            <p class="copyright">Copyright &copy; 2013 Taylor Otwell. Site designed by <a href="http://casserolelabs.com/" title="Casserole Labs">Casserole Labs</a> &amp; <a href="http://daylerees.com" title="Dayle Rees">Dayle Rees</a>.</p>
        </div>
    </footer>

    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="../js/vendor/jquery-1.9.1.min.js"><\/script>')</script>
    <script src="../js/plugins.js"></script>
    <script src="../js/main.min.js"></script>
        <script>
        var _gaq=[['_setAccount','UA-23865777-1'],['_trackPageview']];
        (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];
        g.src='//www.google-analytics.com/ga.js';
        s.parentNode.insertBefore(g,s)}(document,'script'));
    </script>
    </body>
</html>